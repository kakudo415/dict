name: Release

on:
  pull_request:
    types:
      - closed
    branches:
      - main
    paths:
      - '**.csv'
  push:
    branches:
      - main
    paths:
      - '**.csv'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: fetch unshallow
        run: git fetch --prune --unshallow
      
      - name: Get current version
        id: current_version
        run: |
          LATEST_TAG=`git describe --tags --abbrev=0`
          if [[ ${LATEST_TAG} =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]
          then
            echo "::set-output name=major::${BASH_REMATCH[1]}"
            echo "::set-output name=minor::${BASH_REMATCH[2]}"
            echo "::set-output name=patch::${BASH_REMATCH[3]}"
          else
            echo "::set-output name=major::0"
            echo "::set-output name=minor::0"
            echo "::set-output name=patch::0"
          fi

      - name: Bump version
        id: version
        run: |
          echo "::set-output name=major::$((${{ steps.current_version.outputs.major }}))"
          echo "::set-output name=minor::$((${{ steps.current_version.outputs.minor }}))"
          echo "::set-output name=patch::$((${{ steps.current_version.outputs.patch }} + 1))"
      
      - name: Get version tag
        id: version_tag
        run: |
          echo "::set-output name=tag::${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}"
          echo "::set-output name=vtag::v${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}"

      - name: Export for macOS
        run: |
          mkdir -p TermJa-${{ steps.version_tag.outputs.tag }}/macOS
          for RAW_DICT in *.csv; \
            do tail -n +2 ./$RAW_DICT \
              | sed -r 's/(.*),(.*),(.*),(.*)/\2,\1,\4,/g' \
              > TermJa-${{ steps.version_tag.outputs.tag }}/macOS/${RAW_DICT%.csv}.txt; \
            done

      # （UTF-8ではエラーを吐くので、SHIFT-JISを選択）
      - name: Export for Windows
        run: |
          mkdir -p TermJa-${{ steps.version_tag.outputs.tag }}/Windows
          for RAW_DICT in *.csv; do \
            tail -n +2 ./$RAW_DICT \
              | sed -r 's/(.*),(.*),(.*),(.*)/\2\t\1\t\3/g' \
              | iconv -t SHIFT-JIS \
              > TermJa-${{ steps.version_tag.outputs.tag }}/Windows/${RAW_DICT%.csv}.txt;
          done

      - name: Archive
        run: zip -r TermJa-${{ steps.version_tag.outputs.tag }}.zip TermJa-${{ steps.version_tag.outputs.tag }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_tag.outputs.vtag }}
          release_name: TermJa ${{ steps.version_tag.outputs.tag }}
          draft: false
          prerelease: false

      - name: Upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./TermJa-${{ steps.version_tag.outputs.tag }}.zip
          asset_name: TermJa-${{ steps.version_tag.outputs.tag }}.zip
          asset_content_type: application/zip
